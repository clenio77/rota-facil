// üß™ TESTE DE DEBUG: Problema de correspond√™ncia entre endere√ßos limpos e endere√ßos do PDF

// ‚úÖ FUN√á√ÉO: Extrair endere√ßos limpos (sem faixas de numera√ß√£o)
function extractCleanAddresses(text) {
  const cleanAddresses = [];
  
  // ‚úÖ PADR√ÉO 1: "Rua/Avenida - de X/Y a Z/W, N CEP: XXXXXXXX"
  const rangePattern1 = /([A-Za-z√Ä-√ø\s]+)\s*-\s*de\s+[\d\/\s]+a\s+[\d\/\s]+(?:,\s*(\d+))?\s*CEP:\s*(\d{8})/g;
  
  let match;
  while ((match = rangePattern1.exec(text)) !== null) {
    const [, fullAddress, singleNumber, cep] = match;
    
    // ‚úÖ CONSTRUIR ENDERE√áO LIMPO: "Rua/Avenida, N, CEP: XXXXXXXX"
    let cleanAddress = fullAddress.trim();
    
    // ‚úÖ ADICIONAR N√öMERO ESPEC√çFICO SE EXISTIR
    if (singleNumber) {
      cleanAddress += `, ${singleNumber}`;
    }
    
    // ‚úÖ ADICIONAR CEP
    cleanAddress += `, CEP: ${cep}`;
    
    cleanAddresses.push(cleanAddress);
    
    console.log(`üéØ Endere√ßo limpo extra√≠do (padr√£o 1): ${cleanAddress}`);
  }
  
  // ‚úÖ PADR√ÉO 2: "Rua/Avenida de X a Y, N CEP: XXXXXXXX"
  const rangePattern2 = /([A-Za-z√Ä-√ø\s]+)\s+de\s+[\d\s]+a\s+[\d\s]+(?:,\s*(\d+))?\s*CEP:\s*(\d{8})/g;
  
  while ((match = rangePattern2.exec(text)) !== null) {
    const [, fullAddress, singleNumber, cep] = match;
    
    let cleanAddress = fullAddress.trim();
    
    if (singleNumber) {
      cleanAddress += `, ${singleNumber}`;
    }
    
    cleanAddress += `, CEP: ${cep}`;
    
    cleanAddresses.push(cleanAddress);
    
    console.log(`üéØ Endere√ßo limpo extra√≠do (padr√£o 2): ${cleanAddress}`);
  }
  
  // ‚úÖ PADR√ÉO 3: "Rua/Avenida - at√© X/Y, N CEP: XXXXXXXX" (novo padr√£o encontrado)
  const rangePattern3 = /([A-Za-z√Ä-√ø\s]+)\s*-\s*at√©\s+[\d\/\s]+(?:,\s*(\d+))?\s*CEP:\s*(\d{8})/g;
  
  while ((match = rangePattern3.exec(text)) !== null) {
    const [, fullAddress, singleNumber, cep] = match;
    
    let cleanAddress = fullAddress.trim();
    
    if (singleNumber) {
      cleanAddress += `, ${singleNumber}`;
    }
    
    cleanAddress += `, CEP: ${cep}`;
    
    cleanAddresses.push(cleanAddress);
    
    console.log(`üéØ Endere√ßo limpo extra√≠do (padr√£o 3): ${cleanAddress}`);
  }
  
  // ‚úÖ PADR√ÉO 4: "Rua/Avenida at√© X/Y, N CEP: XXXXXXXX" (sem h√≠fen)
  const rangePattern4 = /([A-Za-z√Ä-√ø\s]+)\s+at√©\s+[\d\/\s]+(?:,\s*(\d+))?\s*CEP:\s*(\d{8})/g;
  
  while ((match = rangePattern4.exec(text)) !== null) {
    const [, fullAddress, singleNumber, cep] = match;
    
    let cleanAddress = fullAddress.trim();
    
    if (singleNumber) {
      cleanAddress += `, ${singleNumber}`;
    }
    
    cleanAddress += `, CEP: ${cep}`;
    
    cleanAddresses.push(cleanAddress);
    
    console.log(`üéØ Endere√ßo limpo extra√≠do (padr√£o 4): ${cleanAddress}`);
  }
  
  // ‚úÖ PADR√ÉO 5: "Rua/Avenida - de X/Y at√© Z/W, N CEP: XXXXXXXX" (com "at√©" no meio)
  const rangePattern5 = /([A-Za-z√Ä-√ø\s]+)\s*-\s*de\s+[\d\/\s]+at√©\s+[\d\/\s]+(?:,\s*(\d+))?\s*CEP:\s*(\d{8})/g;
  
  while ((match = rangePattern5.exec(text)) !== null) {
    const [, fullAddress, singleNumber, cep] = match;
    
    let cleanAddress = fullAddress.trim();
    
    if (singleNumber) {
      cleanAddress += `, ${singleNumber}`;
    }
    
    cleanAddress += `, CEP: ${cep}`;
    
    cleanAddresses.push(cleanAddress);
    
    console.log(`üéØ Endere√ßo limpo extra√≠do (padr√£o 5): ${cleanAddress}`);
  }
  
  console.log(`‚úÖ Total de endere√ßos limpos extra√≠dos: ${cleanAddresses.length}`);
  return cleanAddresses;
}

// ‚úÖ SIMULAR A FUN√á√ÉO extractAddressesFromText (vers√£o simplificada)
function extractAddressesFromText(text) {
  const addresses = [];
  const lines = text.split(/\r?\n|\r/);
  let sequence = 1;
  let currentAddress = null;

  console.log(`üîç Processando ${lines.length} linhas do PDF...`);

  for (const line of lines) {
    const trimmedLine = line.trim();
    if (!trimmedLine || trimmedLine.length < 3) continue;

    // ‚úÖ DETECTAR QUALQUER OBJETO ECT (padr√£o mais flex√≠vel)
    if (trimmedLine.match(/[A-Z]{1,2}\s+\d{3}\s+\d{3}\s+\d{3}/) ||
        trimmedLine.match(/[A-Z]{1,2}\s+\d{3}\s+\d{3}\s+\d{3}\s+BR\s+\d{1,2}-\d{3}/) ||
        trimmedLine.includes('MI') || trimmedLine.includes('OY') || 
        trimmedLine.includes('MJ') || trimmedLine.includes('MT') || 
        trimmedLine.includes('TJ') || trimmedLine.includes('BR') ||
        trimmedLine.match(/^\d{3}\s+[A-Z]{2}\s+\d{3}\s+\d{3}\s+\d{3}/)) {
      
      // ‚úÖ SE J√Å TEM ENDERE√áO COMPLETO, SALVAR E CRIAR NOVO
      if (currentAddress && currentAddress.endereco !== 'Endere√ßo a ser extra√≠do') {
        addresses.push(currentAddress);
        console.log(`üíæ Endere√ßo completo salvo: ${currentAddress.objeto} - ${currentAddress.endereco}`);
      }
      
      currentAddress = {
        id: `ect-${Date.now()}-${sequence}`,
        objeto: trimmedLine,
        endereco: 'Endere√ßo a ser extra√≠do',
        cep: 'CEP a ser extra√≠do',
        destinatario: 'Destinat√°rio a ser extra√≠do'
      };
      
      sequence++;
      console.log(`üì¶ Novo objeto ECT detectado: ${trimmedLine}`);
    }

    // ‚úÖ DETECTAR ENDERE√áO
    if (currentAddress && currentAddress.endereco.includes('ser extra√≠do')) {
      if (trimmedLine.includes('RUA') || trimmedLine.includes('AVENIDA') || trimmedLine.includes('AV.') ||
          trimmedLine.includes('Rua') || trimmedLine.includes('Avenida') || trimmedLine.includes('rua') ||
          trimmedLine.includes('avenida')) {
        
        console.log(`üè† Endere√ßo encontrado no PDF: ${trimmedLine}`);
        currentAddress.endereco = trimmedLine;
      }
    }

    // ‚úÖ DETECTAR CEP
    if (currentAddress && currentAddress.cep.includes('ser extra√≠do')) {
      const cepMatch = trimmedLine.match(/(\d{8})|(\d{5}-\d{3})/);
      if (cepMatch) {
        const cep = cepMatch[1] || cepMatch[2]?.replace('-', '');
        if (cep) {
          currentAddress.cep = cep;
          console.log(`üìÆ CEP encontrado: ${cep}`);
        }
      }
    }
  }

  // ‚úÖ ADICIONAR √öLTIMO ENDERE√áO
  if (currentAddress) {
    addresses.push(currentAddress);
  }

  return addresses;
}

// ‚úÖ TESTE COM TEXTO REAL DO PDF
console.log('üß™ TESTE DE DEBUG: Problema de correspond√™ncia entre endere√ßos limpos e endere√ßos do PDF...');

const testText = `
Item 011 - 011 OY 525 071 576 BR 11-
CEP: 38400617
Endere√ßo:
Rua Rio Grande do Sul - de 240/241 a 1533/1534, 956 CEP: 38400650
Coordenadas: -18.923158, -48.276664

Item 012 - 012 AC 969 593 206 BR. 12-X 013 AC 969 593 104 BR 12-X
CEP: 38400650
Endere√ßo:
Rua Rio Grande do Sul - de 240/241 a 1533/1534, 908 CEP: 38400650
Coordenadas: -18.915521, -48.279131

Item 013 - 014 AC 973 482 100 BR 13-
CEP: 38400704
Endere√ßo:
Avenida Floriano Peixoto - de 3070/3071 a 4242/4243, 3283 CEP: 38400704
Coordenadas: -18.917106, -48.278270

Item 014 - 015 AC 973 768 535 BR ‚Ä¢ 14-
CEP: 38400734
Endere√ßo:
Avenida Amazonas - at√© 1469/1470, 232 CEP: 38400734
Coordenadas: -18.921621, -48.275986

Item 015 - 016 BW 147 223 459 BR 15-
CEP: 38400679
Endere√ßo:
Avenida Floriano Peixoto - de 3070/3071 a 4242/4243, 3283 CEP: 38400704
Coordenadas: -18.917106, -48.278270
`;

console.log('üìù Texto de teste:');
console.log(testText);

// ‚úÖ EXTRAIR ENDERE√áOS LIMPOS
console.log('\nüéØ EXTRAINDO ENDERE√áOS LIMPOS...');
const cleanAddresses = extractCleanAddresses(testText);

// ‚úÖ EXTRAIR ENDERE√áOS DO TEXTO
console.log('\nüîç EXTRAINDO ENDERE√áOS DO TEXTO...');
const addresses = extractAddressesFromText(testText);

console.log(`\nüìä RESUMO:`);
console.log(`- Endere√ßos limpos extra√≠dos: ${cleanAddresses.length}`);
console.log(`- Endere√ßos do PDF extra√≠dos: ${addresses.length}`);

// ‚úÖ SIMULAR A APLICA√á√ÉO DOS ENDERE√áOS LIMPOS
console.log('\nüßπ APLICANDO ENDERE√áOS LIMPOS...');
for (let i = 0; i < addresses.length && i < cleanAddresses.length; i++) {
  const cleanAddress = cleanAddresses[i];
  if (cleanAddress) {
    // ‚úÖ EXTRAIR N√öMERO E CEP DO ENDERE√áO LIMPO
    const numberMatch = cleanAddress.match(/, (\d+), CEP: (\d{8})/);
    if (numberMatch) {
      const [, number, cep] = numberMatch;
      const streetName = cleanAddress.replace(/, \d+, CEP: \d{8}/, '').trim();
      
      addresses[i].endereco = `${streetName}, ${number}`;
      addresses[i].cep = cep;
      
      console.log(`üßπ Endere√ßo ${i + 1} limpo: "${streetName}, ${number}" (CEP: ${cep})`);
    }
  }
}

// ‚úÖ MOSTRAR RESULTADO FINAL
console.log('\n‚úÖ RESULTADO FINAL:');
addresses.forEach((address, index) => {
  console.log(`${index + 1}. ${address.objeto}`);
  console.log(`   Endere√ßo: ${address.endereco}`);
  console.log(`   CEP: ${address.cep}`);
  console.log('');
});

console.log('\nüéØ DIAGN√ìSTICO:');
if (cleanAddresses.length < addresses.length) {
  console.log(`‚ùå PROBLEMA: Apenas ${cleanAddresses.length} endere√ßos limpos para ${addresses.length} endere√ßos do PDF`);
  console.log(`üí° SOLU√á√ÉO: A fun√ß√£o extractCleanAddresses n√£o est√° capturando todos os padr√µes`);
} else if (cleanAddresses.length > addresses.length) {
  console.log(`‚ö†Ô∏è AVISO: ${cleanAddresses.length} endere√ßos limpos para ${addresses.length} endere√ßos do PDF`);
  console.log(`üí° SOLU√á√ÉO: Alguns endere√ßos limpos n√£o ser√£o aplicados`);
} else {
  console.log(`‚úÖ PERFEITO: ${cleanAddresses.length} endere√ßos limpos para ${addresses.length} endere√ßos do PDF`);
}
