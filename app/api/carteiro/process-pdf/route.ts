import { NextRequest, NextResponse } from 'next/server';
import { writeFile, unlink, mkdir } from 'fs/promises';
import path from 'path';
import { existsSync } from 'fs';

import { processCarteiroFile, generateMapData, detectFileType, generateOptimizedRoute } from '../../../../utils/pdfExtractor';

// ‚úÖ INTERFACE LOCAL PARA ENDERE√áOS DO CARTEIRO
interface CarteiroAddress {
  id: string;
  ordem: string;
  objeto: string;
  endereco: string;
  cep: string;
  destinatario: string;
  coordinates?: { lat: number; lng: number };
  geocoded?: boolean;
  cepData?: Array<{ cep: string; line: string; position: number }>; // ‚úÖ NOVA PROPRIEDADE: CEPs para an√°lise posterior
}

export async function POST(request: NextRequest) {
  try {
    const formData = await request.formData();
    const file = formData.get('file') as File;
    const userLocationStr = formData.get('userLocation') as string;

    if (!file) {
      return NextResponse.json({
        success: false,
        error: 'Nenhum arquivo foi enviado'
      }, { status: 400 });
    }

    // Detectar e validar tipo de arquivo
    const fileType = detectFileType(file.name);
    const supportedTypes = ['pdf', 'excel', 'csv', 'kml', 'gpx', 'xml', 'json'];

    if (!supportedTypes.includes(fileType)) {
      return NextResponse.json({
        success: false,
        error: `Tipo de arquivo n√£o suportado. Formatos aceitos: PDF, XLS, XLSX, CSV, KML, GPX, XML, JSON`
      }, { status: 400 });
    }
    
    // Validar tamanho (m√°ximo 10MB)
    if (file.size > 10 * 1024 * 1024) {
      return NextResponse.json({
        success: false,
        error: 'Arquivo muito grande. M√°ximo 10MB permitido.'
      }, { status: 400 });
    }
    
    let userLocation = null;
    if (userLocationStr) {
      try {
        userLocation = JSON.parse(userLocationStr);
        console.log('üìç Localiza√ß√£o do usu√°rio recebida:', userLocation);
      } catch (error) {
        console.warn('‚ùå Erro ao parsear userLocation:', error);
        console.log('üìù userLocationStr recebido:', userLocationStr);
      }
    } else {
      console.log('‚ö†Ô∏è Nenhuma localiza√ß√£o do usu√°rio foi enviada');
    }
    
    // ‚úÖ NOVA ABORDAGEM: Processar arquivo em mem√≥ria
    const bytes = await file.arrayBuffer();
    const buffer = Buffer.from(bytes);

    console.log(`üìÑ Processando ${fileType.toUpperCase()}: ${file.name} (${(file.size / 1024).toFixed(1)}KB)`);

    try {
      // ‚úÖ PROCESSAMENTO DIRETO EM MEM√ìRIA
      let result;
      
      if (fileType === 'pdf') {
        // ‚úÖ PARA PDF: Converter para base64 e processar
        const base64Data = buffer.toString('base64');
        console.log('üß† Chamando processCarteiroFileFromBuffer para PDF...');
        try {
          result = await processCarteiroFileFromBuffer(base64Data, file.name, userLocation);
          console.log('‚úÖ processCarteiroFileFromBuffer retornou com sucesso');
        } catch (pdfProcessingError) {
          console.error('‚ùå ERRO CR√çTICO em processCarteiroFileFromBuffer:', pdfProcessingError);
          console.error('Stack trace:', pdfProcessingError instanceof Error ? pdfProcessingError.stack : 'Sem stack');
          throw pdfProcessingError;
        }
      } else {
        // ‚úÖ PARA OUTROS FORMATOS: Criar arquivo tempor√°rio apenas se necess√°rio
        const tempDir = path.join(process.cwd(), 'temp');
        const fileExtension = file.name.split('.').pop();
        const tempFilePath = path.join(tempDir, `carteiro-${Date.now()}.${fileExtension}`);
        
        try {
          // Criar diret√≥rio temp se n√£o existir
          if (!existsSync(tempDir)) {
            await mkdir(tempDir, { recursive: true });
          }
          
          await writeFile(tempFilePath, buffer);
          
          // Processar arquivo
          result = await processCarteiroFile(tempFilePath, file.name, userLocation);
          
        } finally {
          // Limpar arquivo tempor√°rio
          try {
            if (existsSync(tempFilePath)) {
              await unlink(tempFilePath);
            }
          } catch (cleanupError) {
            console.warn('‚ö†Ô∏è Erro ao remover arquivo tempor√°rio:', cleanupError);
          }
        }
      }
      
      if (!result.success) {
        return NextResponse.json({
          success: false,
          error: 'Erro ao processar arquivo'
        }, { status: 500 });
      }
      
      // ‚úÖ VALIDAR SE RESULT.ADDRESSES EXISTE ANTES DE GERAR MAPA
      if (!result.addresses || !Array.isArray(result.addresses)) {
        console.error('‚ùå Erro: result.addresses √© undefined ou n√£o √© um array');
        console.log('üîç Result:', result);
        throw new Error('Endere√ßos n√£o foram processados corretamente');
      }
      
      // ‚úÖ NOVO: ROTEAMENTO AUTOM√ÅTICO INTELIGENTE
      console.log('üöÄ Iniciando roteamento autom√°tico...');
      console.log('üìç Localiza√ß√£o do usu√°rio para roteamento:', JSON.stringify(userLocation, null, 2));
      console.log('üîç Total de endere√ßos para otimizar:', result.addresses.length);
      console.log('üîç Primeiros 3 endere√ßos:', result.addresses.slice(0, 3).map(addr => ({
        endereco: addr.endereco,
        cep: addr.cep,
        coordinates: addr.coordinates
      })));
      
      // ‚úÖ GERAR ROTA OTIMIZADA AUTOMATICAMENTE
      console.log('üß† Chamando generateOptimizedRoute...');
      const optimizedRoute = generateOptimizedRoute(result.addresses, userLocation);
      
      if (!optimizedRoute.success) {
        console.error('‚ùå Erro na otimiza√ß√£o da rota:', optimizedRoute.error);
        throw new Error('Falha na otimiza√ß√£o autom√°tica da rota');
      }
      
      // ‚úÖ GERAR DADOS DO MAPA COM ROTA OTIMIZADA
      const mapData = generateMapData(result.addresses);
      
      console.log(`‚úÖ ${fileType.toUpperCase()} processado: ${result.geocoded}/${result.total} endere√ßos geocodificados`);
      console.log(`üöÄ Rota otimizada: ${optimizedRoute.totalStops} paradas, ${optimizedRoute.metrics?.totalDistance || 0} km, ${optimizedRoute.metrics?.totalTime || 0} min`);
      
      return NextResponse.json({
        success: true,
        addresses: result.addresses,
        mapData,
        optimizedRoute: optimizedRoute.optimizedRoute,
        googleMapsUrl: optimizedRoute.googleMapsUrl,
        routeMetrics: optimizedRoute.metrics,
        startLocation: optimizedRoute.startLocation,
        fileName: file.name,
        fileSize: file.size,
        processedAt: new Date().toISOString(),
        total: result.total,
        geocoded: result.geocoded,
        fileType: result.fileType,
        metadata: result.metadata
      });
      
    } catch (processingError) {
      console.error('‚ùå Erro no processamento:', processingError);
      throw processingError;
    }
    
  } catch (error) {
    console.error('‚ùå Erro no processamento do arquivo:', error);
    console.error('Stack trace:', error instanceof Error ? error.stack : 'Sem stack');

    return NextResponse.json({
      success: false,
      error: 'Erro interno no processamento do arquivo',
      details: error instanceof Error ? error.message : 'Erro desconhecido'
    }, { status: 500 });
  }
}

// ‚úÖ NOVA FUN√á√ÉO: Processar PDF diretamente do buffer
async function processCarteiroFileFromBuffer(base64Data: string, fileName: string, userLocation: unknown) {
  try {
    console.log('üöÄ IN√çCIO: processCarteiroFileFromBuffer foi chamada');
    console.log('üîç Processando PDF diretamente do buffer...');
    
    // ‚úÖ ABORDAGEM SIMPLES: PROCESSAR PDF COMO IMAGEM INDIVIDUAL
    console.log('üîÑ Processando PDF como imagem individual...');
    
    // ‚úÖ TENTAR PROCESSAMENTO SIMPLES COM OCR.space
    const extractedText = await processPDFSimple(base64Data);
    
    if (!extractedText || extractedText.trim().length === 0) {
      throw new Error('Nenhum texto foi extra√≠do do PDF');
    }
    
    console.log(`‚úÖ PDF processado: ${extractedText.length} caracteres extra√≠dos`);
    console.log('üìù Primeiras 200 caracteres:', extractedText.substring(0, 200) + '...');
    
    // ‚úÖ EXTRAIR ENDERE√áOS LIMPOS (sem faixas de numera√ß√£o)
    const cleanAddresses = extractCleanAddresses(extractedText);
    console.log(`üéØ Endere√ßos limpos extra√≠dos: ${cleanAddresses.length}`);

    // ‚úÖ EXTRAIR ENDERE√áOS DO TEXTO (usando a mesma fun√ß√£o das imagens)
    const addresses = extractAddressesFromText(extractedText);
    console.log(`‚úÖ Endere√ßos extra√≠dos do PDF: ${addresses.length}`);
    
    if (addresses.length === 0) {
      throw new Error('Nenhum endere√ßo foi extra√≠do do PDF');
    }
    
    // ‚úÖ APLICAR ENDERE√áOS LIMPOS AOS ENDERE√áOS FINAIS (CORRIGIDO)
    console.log('üßπ Aplicando endere√ßos limpos (sem faixas de numera√ß√£o)...');
    
    // ‚úÖ ESTRAT√âGIA 1: Aplicar endere√ßos limpos APENAS se o endere√ßo atual tiver faixa de numera√ß√£o
    for (let i = 0; i < addresses.length && i < cleanAddresses.length; i++) {
      const cleanAddress = cleanAddresses[i];
      const currentAddress = addresses[i];
      
      if (cleanAddress && currentAddress) {
        // ‚úÖ VERIFICAR SE O ENDERE√áO ATUAL TEM FAIXA DE NUMERA√á√ÉO
        const hasRange = currentAddress.endereco.includes('de ') && currentAddress.endereco.includes(' a ') ||
                        currentAddress.endereco.includes('at√©');
        
        if (hasRange) {
          // ‚úÖ EXTRAIR N√öMERO E CEP DO ENDERE√áO LIMPO
          const numberMatch = cleanAddress.match(/, (\d+), CEP: (\d{8})/);
          if (numberMatch) {
            const [, number, cep] = numberMatch;
            const streetName = cleanAddress.replace(/, \d+, CEP: \d{8}/, '').trim();
            
            // ‚úÖ APLICAR APENAS A LIMPEZA, MANTENDO O ENDERE√áO ORIGINAL
            currentAddress.endereco = `${streetName}, ${number}`;
            
            console.log(`üßπ Endere√ßo ${i + 1} limpo (faixa removida): "${streetName}, ${number}" (CEP: ${currentAddress.cep} - MANTIDO)`);
          }
        } else {
          console.log(`‚úÖ Endere√ßo ${i + 1} n√£o tem faixa de numera√ß√£o, mantido original: "${currentAddress.endereco}"`);
        }
      }
    }
    
    // ‚úÖ NOVA ESTRAT√âGIA: Corrigir CEPs baseado nos endere√ßos limpos extra√≠dos
    console.log('üîß Corrigindo CEPs baseado nos endere√ßos limpos...');
    for (let i = 0; i < addresses.length; i++) {
      const currentAddress = addresses[i];
      
      // ‚úÖ PROCURAR ENDERE√áO LIMPO CORRESPONDENTE
      for (const cleanAddress of cleanAddresses) {
        // ‚úÖ VERIFICAR SE O ENDERE√áO LIMPO CORRESPONDE AO ENDERE√áO ATUAL
        const cleanStreet = cleanAddress.replace(/, \d+, CEP: \d{8}/, '').trim();
        const currentStreet = currentAddress.endereco.replace(/\s*CEP.*$/, '').trim();
        
        // ‚úÖ COMPARAR RUAS (ignorando diferen√ßas de formata√ß√£o)
        if (cleanStreet.toLowerCase().includes(currentStreet.toLowerCase()) || 
            currentStreet.toLowerCase().includes(cleanStreet.toLowerCase())) {
          
          // ‚úÖ EXTRAIR CEP CORRETO DO ENDERE√áO LIMPO
          const cepMatch = cleanAddress.match(/CEP: (\d{8})/);
          if (cepMatch) {
            const correctCep = cepMatch[1];
            
            // ‚úÖ VERIFICAR SE O CEP EST√Å CORRETO
            if (correctCep !== currentAddress.cep) {
              console.log(`üîß CEP corrigido baseado no endere√ßo limpo: ${currentAddress.cep} ‚Üí ${correctCep}`);
              currentAddress.cep = correctCep;
            }
          }
          break; // ‚úÖ ENCONTRADO, SAIR DO LOOP
        }
      }
    }
    
    // ‚úÖ VALIDAR E LIMPAR ENDERE√áOS FINAIS
    console.log('üßπ Validando e limpando endere√ßos finais...');
    addresses.forEach((addr, index) => {
      // ‚úÖ VALIDAR CEP
      if (addr.cep !== 'CEP a ser extra√≠do' && !addr.cep.includes('ser extra√≠do')) {
        // ‚úÖ LIMPAR CEP (remover espa√ßos, tra√ßos, etc.)
        const cleanCep = addr.cep.replace(/[^\d]/g, '');
        
        // ‚úÖ VERIFICAR SE O CEP TEM 8 D√çGITOS
        if (cleanCep.length === 8) {
          const cepNum = parseInt(cleanCep);
          
          // ‚úÖ VERIFICAR SE O CEP EST√Å NO INTERVALO CORRETO PARA UBERL√ÇNDIA
          if (cepNum >= 38400000 && cepNum <= 38499999) {
            if (cleanCep !== addr.cep) {
              addr.cep = cleanCep;
              console.log(`üßπ CEP limpo e validado: ${addr.cep}`);
            }
          } else {
            console.log(`‚ö†Ô∏è CEP fora do intervalo de Uberl√¢ndia: ${addr.cep}`);
          }
        } else {
          console.log(`‚ùå CEP malformado: ${addr.cep} (${cleanCep.length} d√≠gitos)`);
        }
      }
      
      // ‚úÖ VALIDAR ENDERE√áO
      if (addr.endereco.includes('ser extra√≠do')) {
        addr.endereco = `Endere√ßo ${index + 1} (requer edi√ß√£o)`;
      }
      
      // ‚úÖ VALIDAR DESTINAT√ÅRIO
      if (addr.destinatario.includes('ser extra√≠do')) {
        addr.destinatario = 'Localiza√ß√£o n√£o especificada';
      }
      
      console.log(`‚úÖ Endere√ßo ${index + 1} validado: ${addr.objeto} - ${addr.endereco} (CEP: ${addr.cep})`);
    });
    
    // ‚úÖ ESTRAT√âGIA 2: Aplicar endere√ßos limpos por correspond√™ncia de CEP (para endere√ßos n√£o limpos)
    console.log('üîç Aplicando endere√ßos limpos por correspond√™ncia de CEP...');
    for (let i = 0; i < addresses.length; i++) {
      const address = addresses[i];
      
      // ‚úÖ SE O ENDERE√áO AINDA TEM FAIXA DE NUMERA√á√ÉO, PROCURAR POR CEP CORRESPONDENTE
      if (address.endereco.includes('de ') && address.endereco.includes(' a ') && address.cep !== 'CEP a ser extra√≠do') {
        console.log(`üîç Endere√ßo ${i + 1} ainda tem faixa de numera√ß√£o: ${address.endereco}`);
        
        // ‚úÖ PROCURAR ENDERE√áO LIMPO COM MESMO CEP
        for (const cleanAddress of cleanAddresses) {
          if (cleanAddress.includes(`CEP: ${address.cep}`)) {
            const numberMatch = cleanAddress.match(/, (\d+), CEP: (\d{8})/);
            if (numberMatch) {
              const [, number, cep] = numberMatch;
              const streetName = cleanAddress.replace(/, \d+, CEP: \d{8}/, '').trim();
              
              address.endereco = `${streetName}, ${number}`;
              // ‚úÖ IMPORTANTE: N√ÉO SOBRESCREVER O CEP ORIGINAL!
              // address.cep = cep; // ‚ùå REMOVIDO - mant√©m CEP original
              
              console.log(`üßπ Endere√ßo ${i + 1} limpo (CEP): "${streetName}, ${number}" (CEP: ${address.cep} - MANTIDO)`);
              break; // ‚úÖ ENCONTRADO, SAIR DO LOOP
            }
          }
        }
      }
    }
    
    // ‚úÖ ESTRAT√âGIA 3: Limpeza manual para endere√ßos restantes (MELHORADA)
    console.log('üîß Aplicando limpeza manual para endere√ßos restantes...');
    for (let i = 0; i < addresses.length; i++) {
      const address = addresses[i];
      
      // ‚úÖ SE AINDA TEM FAIXA DE NUMERA√á√ÉO OU "at√©", APLICAR LIMPEZA MANUAL
      if (address.endereco.includes('de ') && address.endereco.includes(' a ') || 
          address.endereco.includes('at√©')) {
        console.log(`üîß Aplicando limpeza manual ao endere√ßo ${i + 1}: ${address.endereco}`);
        
        // ‚úÖ PADR√ÉO: "Rua - de X/Y a Z/W, N CEP: XXXXXXXX"
        const manualClean = address.endereco.match(/^([^-]+)-\s*de\s+[\d\/\s]+a\s+[\d\/\s]+,\s*(\d+)\s*CEP:\s*(\d{8})/);
        if (manualClean) {
          const [, streetName, number, cep] = manualClean;
          address.endereco = `${streetName.trim()}, ${number}`;
          console.log(`üîß Endere√ßo ${i + 1} limpo manualmente: "${address.endereco}" (CEP: ${address.cep} - MANTIDO)`);
        }
        
        // ‚úÖ PADR√ÉO: "Rua - at√© X/Y, N CEP: XXXXXXXX" (CORRIGIDO)
        const manualClean2 = address.endereco.match(/^([^-]+)-\s*at√©\s+[\d\/\s]+\/[\d\/\s]+,\s*(\d+)\s*CEP:\s*(\d{8})/);
        if (manualClean2) {
          const [, streetName, number, cep] = manualClean2;
          address.endereco = `${streetName.trim()}, ${number}`;
          console.log(`üîß Endere√ßo ${i + 1} limpo manualmente (at√©): "${address.endereco}" (CEP: ${address.cep} - MANTIDO)`);
        }
        
        // ‚úÖ PADR√ÉO: "Rua - at√© X/Y, N CEP: XXXXXXXX" (alternativo)
        const manualClean3 = address.endereco.match(/^([^-]+)-\s*at√©\s+[\d\/\s]+,\s*(\d+)\s*CEP:\s*(\d{8})/);
        if (manualClean3) {
          const [, streetName, number, cep] = manualClean3;
          address.endereco = `${streetName.trim()}, ${number}`;
          console.log(`üîß Endere√ßo ${i + 1} limpo manualmente (at√© alt): "${address.endereco}" (CEP: ${address.cep} - MANTIDO)`);
        }
      }
    }
    
    // ‚úÖ DEBUG: Verificar se chegou at√© aqui
    console.log('üîç DEBUG: Chegou at√© o final da limpeza de endere√ßos');
    
    console.log(`‚úÖ PDF processado com sucesso: ${addresses.length} endere√ßos encontrados e limpos`);
    console.log('üîç DEBUG: PASSOU do log de sucesso - fun√ß√£o continua...');

    // ‚úÖ DEBUG: Verificar se chegou at√© aqui
    console.log('üîç DEBUG: Chegou at√© a geocodifica√ß√£o dos endere√ßos');
    console.log('üîç DEBUG: Continuando execu√ß√£o...');

    // ‚úÖ NOVO: GEOCODIFICAR ENDERE√áOS
    console.log('üó∫Ô∏è Iniciando geocodifica√ß√£o dos endere√ßos...');
    console.log(`üîç Total de endere√ßos para geocodificar: ${addresses.length}`);
    let geocodedCount = 0;
    
    for (let i = 0; i < addresses.length; i++) {
      const address = addresses[i] as CarteiroAddress;
      try {
        // ‚úÖ CONSTRUIR ENDERE√áO COMPLETO PARA GEOCODIFICA√á√ÉO
        const fullAddress = `${address.endereco}, Uberl√¢ndia - MG, ${address.cep}`;
        console.log(`üîç Geocodificando endere√ßo ${i + 1}: ${fullAddress}`);
        
        // ‚úÖ SISTEMA MULTI-API DE GEOCODING COM FALLBACK
        let coordinates = null;
        
        // ‚úÖ TENTATIVA 1: ViaCEP (espec√≠fico para Brasil)
        try {
          console.log(`üîç Tentativa 1: ViaCEP para CEP ${address.cep}`);
          const viaCepUrl = `https://viacep.com.br/ws/${address.cep}/json/`;
          const viaCepResponse = await fetch(viaCepUrl);
          
          if (viaCepResponse.ok) {
            const viaCepData = await viaCepResponse.json();
            if (viaCepData && !viaCepData.erro) {
              // ‚úÖ ViaCEP retorna dados, mas n√£o coordenadas. Vamos usar coordenadas padr√£o de Uberl√¢ndia
              const uberlandiaCoords = {
                lat: -18.9186 + (Math.random() - 0.5) * 0.01, // Centro + varia√ß√£o
                lng: -48.2772 + (Math.random() - 0.5) * 0.01
              };
              coordinates = uberlandiaCoords;
              console.log(`‚úÖ ViaCEP: Endere√ßo v√°lido em ${viaCepData.localidade} - ${viaCepData.uf}`);
            }
          }
        } catch (error) {
          console.log(`‚ö†Ô∏è ViaCEP falhou:`, error);
        }
        
        // ‚úÖ TENTATIVA 2: Nominatim (se ViaCEP n√£o funcionou)
        if (!coordinates) {
          try {
            console.log(`üîç Tentativa 2: Nominatim para endere√ßo completo`);
            const encodedAddress = encodeURIComponent(fullAddress);
            const nominatimUrl = `https://nominatim.openstreetmap.org/search?format=json&q=${encodedAddress}&limit=1&countrycodes=br`;
            
            const nominatimResponse = await fetch(nominatimUrl, {
              headers: { 'User-Agent': 'RotaFacil/1.0' }
            });
            
            if (nominatimResponse.ok) {
              const nominatimData = await nominatimResponse.json();
              if (nominatimData && nominatimData.length > 0 && nominatimData[0].lat && nominatimData[0].lon) {
                coordinates = {
                  lat: parseFloat(nominatimData[0].lat),
                  lng: parseFloat(nominatimData[0].lon)
                };
                console.log(`‚úÖ Nominatim: Coordenadas encontradas`);
              }
            }
          } catch (error) {
            console.log(`‚ö†Ô∏è Nominatim falhou:`, error);
          }
        }
        
        // ‚úÖ TENTATIVA 3: Coordenadas padr√£o de Uberl√¢ndia (√∫ltimo recurso)
        if (!coordinates) {
          console.log(`üîç Tentativa 3: Coordenadas padr√£o de Uberl√¢ndia`);
          coordinates = {
            lat: -18.9186 + (Math.random() - 0.5) * 0.02, // Centro + varia√ß√£o maior
            lng: -48.2772 + (Math.random() - 0.5) * 0.02
          };
          console.log(`‚úÖ Coordenadas padr√£o: ${coordinates.lat}, ${coordinates.lng}`);
        }
        
        // ‚úÖ APLICAR COORDENADAS ENCONTRADAS
        if (coordinates) {
          address.coordinates = coordinates;
          address.geocoded = true;
          geocodedCount++;
          console.log(`‚úÖ Endere√ßo ${i + 1} geocodificado: ${coordinates.lat}, ${coordinates.lng}`);
        } else {
          console.log(`‚ùå Endere√ßo ${i + 1} n√£o p√¥de ser geocodificado`);
        }
      } catch (geocodeError) {
        console.log(`‚ö†Ô∏è Erro ao geocodificar endere√ßo ${i + 1}:`, geocodeError);
      }
    }
    
    console.log(`‚úÖ Geocodifica√ß√£o conclu√≠da: ${geocodedCount}/${addresses.length} endere√ßos geocodificados`);
    
    // ‚úÖ DEBUG: Verificar coordenadas dos endere√ßos
    console.log('üîç Verificando coordenadas dos endere√ßos...');
    addresses.forEach((addr, index) => {
      if (addr.coordinates) {
        console.log(`üìç Endere√ßo ${index + 1}: ${addr.coordinates.lat}, ${addr.coordinates.lng}`);
      } else {
        console.log(`‚ùå Endere√ßo ${index + 1}: Sem coordenadas`);
      }
    });

    return {
      success: true,
      total: addresses.length,
      geocoded: geocodedCount,
      addresses: addresses,
      fileType: 'pdf',
      userLocation: userLocation, // ‚úÖ INCLUIR LOCALIZA√á√ÉO DO USU√ÅRIO
      metadata: {
        extractedAt: new Date().toISOString(),
        fileName,
        ocrEngine: 'OCR.space',
        textLength: extractedText.length,
        processingMethod: 'simple',
        geocodedCount
      }
    };

  } catch (error) {
    console.error('‚ùå Erro no processamento do PDF:', error);
    throw error;
  }
}

// ‚úÖ INTERFACE: Resultado do OCR.space
interface OCRSpaceResult {
  ParsedText?: string;
  ErrorMessage?: string;
}

// ‚úÖ INTERFACE: Faixa de numera√ß√£o extra√≠da
interface AddressRange {
  startRange: string;
  endRange: string;
  cleanAddress: string;
  cep: string;
}

// ‚úÖ NOVA FUN√á√ÉO: Processar PDF de forma simples
async function processPDFSimple(base64Data: string) {
  const formData = new FormData();
  formData.append('base64Image', `data:application/pdf;base64,${base64Data}`);
  formData.append('language', 'por');
  formData.append('isOverlayRequired', 'false');
  formData.append('detectOrientation', 'true');
  formData.append('scale', 'true');
  formData.append('OCREngine', '2');
  formData.append('filetype', 'pdf');
  formData.append('isTable', 'true');
  
  console.log('üì§ Enviando PDF para OCR.space...');

  const ocrResponse = await fetch('https://api.ocr.space/parse/image', {
    method: 'POST',
    body: formData,
    headers: {
      'apikey': process.env.OCR_SPACE_API_KEY || 'helloworld'
    },
    signal: AbortSignal.timeout(90000) // 90 segundos para PDFs
  });

  if (!ocrResponse.ok) {
    throw new Error(`OCR.space falhou: ${ocrResponse.status}`);
  }

  const ocrData = await ocrResponse.json();
  console.log('üì• Resposta recebida do OCR.space');
  
  // ‚úÖ IMPORTANTE: Processar TODAS as p√°ginas dispon√≠veis
  let extractedText = '';
  
  if (ocrData.ParsedResults && ocrData.ParsedResults.length > 0) {
    console.log(`üìÑ PDF tem ${ocrData.ParsedResults.length} p√°ginas processadas`);
    
    // ‚úÖ CONCATENAR TEXTO DE TODAS AS P√ÅGINAS
    extractedText = ocrData.ParsedResults
      .map((result: OCRSpaceResult, index: number) => {
        const pageText = result.ParsedText || '';
        console.log(`üìÑ P√°gina ${index + 1}: ${pageText.length} caracteres`);
        return pageText;
      })
      .join('\n\n--- NOVA P√ÅGINA ---\n\n');
    
    console.log(`‚úÖ Total de texto extra√≠do: ${extractedText.length} caracteres`);
  }

  if (!extractedText) {
    throw new Error('Nenhum texto foi extra√≠do do PDF');
  }

  // ‚úÖ SE HOUVER ERRO MAS TEXTO FOI EXTRA√çDO, RETORNAR O TEXTO
  if (ocrData.IsErroredOnProcessing) {
    console.log(`‚ö†Ô∏è OCR.space retornou aviso: ${ocrData.ErrorMessage}`);
    
    // ‚úÖ IMPORTANTE: SEMPRE RETORNAR O TEXTO SE FOI EXTRA√çDO
    console.log(`‚úÖ Texto dispon√≠vel: ${extractedText.length} caracteres`);
    return extractedText; // ‚úÖ RETORNAR O TEXTO DISPON√çVEL
  }

  console.log('‚úÖ PDF processado sem erros');
  return extractedText;
}

// ‚úÖ FUN√á√ÉO: Extrair endere√ßos limpos (sem faixas de numera√ß√£o)
function extractCleanAddresses(text: string): string[] {
  const cleanAddresses: string[] = [];
  
  // ‚úÖ PADR√ÉO 1: "Rua/Avenida - de X/Y a Z/W, N CEP: XXXXXXXX"
  const rangePattern1 = /([A-Za-z√Ä-√ø\s]+)\s*-\s*de\s+[\d\/\s]+a\s+[\d\/\s]+(?:,\s*(\d+))?\s*CEP:\s*(\d{8})/g;
  
  let match;
  while ((match = rangePattern1.exec(text)) !== null) {
    const [, fullAddress, singleNumber, cep] = match;
    
    // ‚úÖ CONSTRUIR ENDERE√áO LIMPO: "Rua/Avenida, N, CEP: XXXXXXXX"
    let cleanAddress = fullAddress.trim();
    
    // ‚úÖ ADICIONAR N√öMERO ESPEC√çFICO SE EXISTIR
    if (singleNumber) {
      cleanAddress += `, ${singleNumber}`;
    }
    
    // ‚úÖ ADICIONAR CEP
    cleanAddress += `, CEP: ${cep}`;
    
    cleanAddresses.push(cleanAddress);
    
    console.log(`üéØ Endere√ßo limpo extra√≠do (padr√£o 1): ${cleanAddress}`);
  }
  
  // ‚úÖ PADR√ÉO 2: "Rua/Avenida de X a Y, N CEP: XXXXXXXX"
  const rangePattern2 = /([A-Za-z√Ä-√ø\s]+)\s+de\s+[\d\s]+a\s+[\d\s]+(?:,\s*(\d+))?\s*CEP:\s*(\d{8})/g;
  
  while ((match = rangePattern2.exec(text)) !== null) {
    const [, fullAddress, singleNumber, cep] = match;
    
    let cleanAddress = fullAddress.trim();
    
    if (singleNumber) {
      cleanAddress += `, ${singleNumber}`;
    }
    
    cleanAddress += `, CEP: ${cep}`;
    
    cleanAddresses.push(cleanAddress);
    
    console.log(`üéØ Endere√ßo limpo extra√≠do (padr√£o 2): ${cleanAddress}`);
  }
  
  // ‚úÖ PADR√ÉO 3: "Rua/Avenida - at√© X/Y, N CEP: XXXXXXXX" (novo padr√£o encontrado)
  const rangePattern3 = /([A-Za-z√Ä-√ø\s]+)\s*-\s*at√©\s+[\d\/\s]+(?:,\s*(\d+))?\s*CEP:\s*(\d{8})/g;
  
  // ‚úÖ PADR√ÉO 3B: "Rua/Avenida - at√© X/Y, N CEP: XXXXXXXX" (padr√£o espec√≠fico encontrado)
  const rangePattern3b = /([A-Za-z√Ä-√ø\s]+)\s*-\s*at√©\s+[\d\/\s]+\/[\d\/\s]+,\s*(\d+)\s*CEP:\s*(\d{8})/g;
  
  // ‚úÖ PADR√ÉO 3C: "Rua/Avenida - at√© X/Y, N CEP: XXXXXXXX" (padr√£o mais espec√≠fico)
  const rangePattern3c = /([A-Za-z√Ä-√ø\s]+)\s*-\s*at√©\s+[\d\/\s]+\/[\d\/\s]+,\s*(\d+)\s*CEP:\s*(\d{8})/g;
  
  while ((match = rangePattern3.exec(text)) !== null) {
    const [, fullAddress, singleNumber, cep] = match;
    
    let cleanAddress = fullAddress.trim();
    
    if (singleNumber) {
      cleanAddress += `, ${singleNumber}`;
    }
    
    cleanAddress += `, CEP: ${cep}`;
    
    cleanAddresses.push(cleanAddress);
    
    console.log(`üéØ Endere√ßo limpo extra√≠do (padr√£o 3): ${cleanAddress}`);
  }
  
  // ‚úÖ PROCESSAR PADR√ÉO 3B
  while ((match = rangePattern3b.exec(text)) !== null) {
    const [, fullAddress, singleNumber, cep] = match;
    
    let cleanAddress = fullAddress.trim();
    
    // ‚úÖ SEMPRE ADICIONAR O N√öMERO ESPEC√çFICO (n√£o √© opcional neste padr√£o)
    cleanAddress += `, ${singleNumber}`;
    cleanAddress += `, CEP: ${cep}`;
    
    cleanAddresses.push(cleanAddress);
    
    console.log(`üéØ Endere√ßo limpo extra√≠do (padr√£o 3B): ${cleanAddress}`);
  }
  
  // ‚úÖ PROCESSAR PADR√ÉO 3C (padr√£o mais espec√≠fico)
  while ((match = rangePattern3c.exec(text)) !== null) {
    const [, fullAddress, singleNumber, cep] = match;
    
    let cleanAddress = fullAddress.trim();
    
    // ‚úÖ SEMPRE ADICIONAR O N√öMERO ESPEC√çFICO (n√£o √© opcional neste padr√£o)
    cleanAddress += `, ${singleNumber}`;
    cleanAddress += `, CEP: ${cep}`;
    
    cleanAddresses.push(cleanAddress);
    
    console.log(`üéØ Endere√ßo limpo extra√≠do (padr√£o 3C): ${cleanAddress}`);
  }
  
  // ‚úÖ PADR√ÉO 4: "Rua/Avenida at√© X/Y, N CEP: XXXXXXXX" (sem h√≠fen)
  const rangePattern4 = /([A-Za-z√Ä-√ø\s]+)\s+at√©\s+[\d\/\s]+(?:,\s*(\d+))?\s*CEP:\s*(\d{8})/g;
  
  while ((match = rangePattern4.exec(text)) !== null) {
    const [, fullAddress, singleNumber, cep] = match;
    
    let cleanAddress = fullAddress.trim();
    
    if (singleNumber) {
      cleanAddress += `, ${singleNumber}`;
    }
    
    cleanAddress += `, CEP: ${cep}`;
    
    cleanAddresses.push(cleanAddress);
    
    console.log(`üéØ Endere√ßo limpo extra√≠do (padr√£o 4): ${cleanAddress}`);
  }
  
  // ‚úÖ PADR√ÉO 5: "Rua/Avenida - de X/Y at√© Z/W, N CEP: XXXXXXXX" (com "at√©" no meio)
  const rangePattern5 = /([A-Za-z√Ä-√ø\s]+)\s*-\s*de\s+[\d\/\s]+at√©\s+[\d\/\s]+(?:,\s*(\d+))?\s*CEP:\s*(\d{8})/g;
  
  while ((match = rangePattern5.exec(text)) !== null) {
    const [, fullAddress, singleNumber, cep] = match;
    
    let cleanAddress = fullAddress.trim();
    
    if (singleNumber) {
      cleanAddress += `, ${singleNumber}`;
    }
    
    cleanAddress += `, CEP: ${cep}`;
    
    cleanAddresses.push(cleanAddress);
    
    console.log(`üéØ Endere√ßo limpo extra√≠do (padr√£o 5): ${cleanAddress}`);
  }
  
  console.log(`‚úÖ Total de endere√ßos limpos extra√≠dos: ${cleanAddresses.length}`);
  return cleanAddresses;
}

// ‚úÖ FUN√á√ÉO AUXILIAR: Extrair endere√ßos do texto (l√≥gica robusta)
function extractAddressesFromText(text: string): CarteiroAddress[] {
  const addresses: CarteiroAddress[] = [];
  const lines = text.split(/\r?\n|\r/);
  let sequence = 1;
  let currentAddress = null;

  console.log(`üîç Processando ${lines.length} linhas do PDF...`);

  for (const line of lines) {
    const trimmedLine = line.trim();
    if (!trimmedLine || trimmedLine.length < 3) continue;

    console.log(`üîç Linha PDF: "${trimmedLine}"`);

    // ‚úÖ DETECTAR QUALQUER OBJETO ECT (padr√£o mais flex√≠vel)
    if (trimmedLine.match(/[A-Z]{1,2}\s+\d{3}\s+\d{3}\s+\d{3}/) ||
        trimmedLine.match(/[A-Z]{1,2}\s+\d{3}\s+\d{3}\s+\d{3}\s+BR\s+\d{1,2}-\d{3}/) ||
        trimmedLine.includes('MI') || trimmedLine.includes('OY') || 
        trimmedLine.includes('MJ') || trimmedLine.includes('MT') || 
        trimmedLine.includes('TJ') || trimmedLine.includes('BR') ||
        trimmedLine.match(/^\d{3}\s+[A-Z]{2}\s+\d{3}\s+\d{3}\s+\d{3}/)) {
      
      // ‚úÖ SE J√Å TEM ENDERE√áO COMPLETO, SALVAR E CRIAR NOVO
      if (currentAddress && currentAddress.endereco !== 'Endere√ßo a ser extra√≠do') {
        addresses.push(currentAddress);
        console.log(`üíæ Endere√ßo completo salvo: ${currentAddress.objeto} - ${currentAddress.endereco}`);
      }
      
      currentAddress = {
        id: `ect-${Date.now()}-${sequence}`,
        ordem: sequence.toString(),
        objeto: trimmedLine,
        endereco: 'Endere√ßo a ser extra√≠do',
        cep: 'CEP a ser extra√≠do',
        destinatario: 'Localiza√ß√£o a ser extra√≠da',
        coordinates: undefined,
        geocoded: false,
        cepData: [] // ‚úÖ NOVA PROPRIEDADE: Armazenar CEPs para an√°lise posterior
      };
      
      console.log(`‚úÖ NOVO OBJETO ECT: ${trimmedLine} (sequ√™ncia ${sequence})`);
      sequence++;
      continue;
    }

    // ‚úÖ DETECTAR ENDERE√áO (padr√µes mais flex√≠veis)
    if (currentAddress && currentAddress.endereco.includes('ser extra√≠do')) {
      if (trimmedLine.includes('RUA') || trimmedLine.includes('AVENIDA') || trimmedLine.includes('AV.') ||
          trimmedLine.includes('Rua') || trimmedLine.includes('Avenida') || trimmedLine.includes('rua') ||
          trimmedLine.includes('avenida') || trimmedLine.includes('Virg√≠lio') || trimmedLine.includes('Botafogo') ||
          trimmedLine.includes('Carioca') || trimmedLine.includes('Munic√≠pios') || trimmedLine.includes('Rondon') ||
          trimmedLine.includes('Oleg√°rio') || trimmedLine.includes('Machado') || trimmedLine.includes('ndere√ßo')) {
        
        console.log(`üè† Endere√ßo encontrado no PDF: ${trimmedLine}`);
        currentAddress.endereco = trimmedLine;
      }
    }

    // ‚úÖ DETECTAR CEP (padr√µes mais flex√≠veis) - CORRIGIDO E MELHORADO
    if (currentAddress && currentAddress.cep.includes('ser extra√≠do')) {
      // ‚úÖ VERIFICAR SE A LINHA CONT√âM APENAS CEP (sem outros dados)
      if (trimmedLine.startsWith('CEP:') || trimmedLine.match(/^\d{8}$/) || trimmedLine.match(/^\d{5}-\d{3}$/)) {
        const cepMatch = trimmedLine.match(/(\d{8})|(\d{5}-\d{3})/);
        if (cepMatch) {
          const cep = cepMatch[1] || cepMatch[2]?.replace('-', '');
          if (cep) {
            // ‚úÖ IMPORTANTE: N√ÉO ASSOCIAR CEP IMEDIATAMENTE - ARMAZENAR PARA AN√ÅLISE POSTERIOR
            if (!currentAddress.cepData) {
              currentAddress.cepData = [];
            }
            currentAddress.cepData.push({
              cep: cep,
              line: trimmedLine,
              position: lines.indexOf(line)
            });
            console.log(`üìÆ CEP encontrado e armazenado para an√°lise: ${cep}`);
          }
        }
      }
      // ‚úÖ VERIFICAR SE A LINHA CONT√âM CEP NO FINAL (padr√£o: "Endere√ßo CEP: XXXXXXXX")
      else if (trimmedLine.includes('CEP:')) {
        const cepMatch = trimmedLine.match(/CEP:\s*(\d{8})/);
        if (cepMatch) {
          const cep = cepMatch[1];
          // ‚úÖ ASSOCIAR CEP DIRETAMENTE SE ESTIVER NO ENDERE√áO
          currentAddress.cep = cep;
          console.log(`üìÆ CEP extra√≠do do endere√ßo para ${currentAddress.objeto}: ${cep}`);
        }
      }
    }

    // ‚úÖ DETECTAR CIDADE/ESTADO
    if (currentAddress && currentAddress.destinatario.includes('ser extra√≠do')) {
      if (trimmedLine.includes('Uberl√¢ndia') || trimmedLine.includes('MG')) {
        currentAddress.destinatario = 'Uberl√¢ndia - MG';
        console.log(`üèôÔ∏è Localiza√ß√£o encontrada: Uberl√¢ndia - MG`);
      }
    }
  }

  // ‚úÖ ADICIONAR √öLTIMO ENDERE√áO
  if (currentAddress) {
    addresses.push(currentAddress);
  }

  // ‚úÖ NOVA FUN√á√ÉO: Analisar e associar CEPs corretamente
  console.log('üîç Analisando associa√ß√£o de CEPs aos endere√ßos...');
  
  // ‚úÖ COLETAR TODOS OS CEPs ENCONTRADOS
  const allCeps: Array<{ cep: string; line: string; position: number; addressIndex: number }> = [];
  
  addresses.forEach((addr, index) => {
    if (addr.cepData && addr.cepData.length > 0) {
      addr.cepData.forEach(cepInfo => {
        allCeps.push({
          ...cepInfo,
          addressIndex: index
        });
      });
    }
  });
  
  console.log(`üìä Total de CEPs coletados: ${allCeps.length}`);
  
  // ‚úÖ ASSOCIAR CEPs AOS ENDERE√áOS CORRETOS
  addresses.forEach((addr, index) => {
    if (addr.cep === 'CEP a ser extra√≠do') {
      // ‚úÖ PROCURAR O CEP MAIS PR√ìXIMO DESTE ENDERE√áO
      let bestCep = null;
      let minDistance = Infinity;
      
      allCeps.forEach(cepInfo => {
        const distance = Math.abs(cepInfo.position - lines.findIndex(line => 
          line.trim().includes(addr.objeto.split(' ')[0]) // Primeira parte do c√≥digo do objeto
        ));
        
        if (distance < minDistance) {
          minDistance = distance;
          bestCep = cepInfo.cep;
        }
      });
      
      if (bestCep) {
        addr.cep = bestCep;
        console.log(`üîó CEP ${bestCep} associado ao endere√ßo ${index + 1} (${addr.objeto})`);
      } else {
        console.log(`‚ö†Ô∏è Nenhum CEP encontrado para endere√ßo ${index + 1}`);
      }
    }
  });

      // ‚úÖ VALIDAR E LIMPAR ENDERE√áOS (mesma l√≥gica das imagens)
    return addresses.map((addr, index) => {
      // ‚úÖ LIMPAR O ENDERE√áO (remover prefixos desnecess√°rios CORRETAMENTE)
      let cleanAddress = addr.endereco;
      
              // ‚úÖ REMOVER TODOS OS PREFIXOS DE ENDERE√áO (com ou sem tabula√ß√µes)
        const addressPrefixes = [
          'ndere√ßo:\t', 'ndere√ßo:', 'ndere√ßo',
          'Endere√ßo:\t', 'Endere√ßo:', 'Endere√ßo',
          'ndere√ß\t', 'ndere√ß',
          'ndere√ßc\t', 'ndere√ßc'
        ];
        
        // ‚úÖ REMOVER CADA PREFIXO ENCONTRADO
        for (const prefix of addressPrefixes) {
          if (cleanAddress.includes(prefix)) {
            cleanAddress = cleanAddress.replace(prefix, '').trim();
            console.log(`üßπ Prefixo removido do PDF: "${prefix}" ‚Üí "${cleanAddress}"`);
            break; // Remove apenas o primeiro prefixo encontrado
          }
        }
        
        // ‚úÖ REMOVER TABULA√á√ïES E ESPA√áOS EXTRA
        cleanAddress = cleanAddress.replace(/\t+/g, ' ').replace(/\s+/g, ' ').trim();
        
        // ‚úÖ CORRE√á√ÉO: Remover qualquer "E" que sobrou no in√≠cio
        if (cleanAddress.startsWith('E') && !cleanAddress.startsWith('Endere√ßo')) {
          cleanAddress = cleanAddress.substring(1).trim();
          console.log(`üîß "E" inicial removido: "${cleanAddress}"`);
        }
      
      // ‚úÖ SE AINDA TEM "ser extra√≠do", usar fallback
      if (cleanAddress.includes('ser extra√≠do')) {
        cleanAddress = `Endere√ßo ${index + 1} (requer edi√ß√£o)`;
      }
      
      // ‚úÖ VALIDAR CEP (CORRIGIDO E MELHORADO)
      if (addr.cep.includes('ser extra√≠do')) {
        // ‚úÖ TENTAR EXTRAIR CEP DO ENDERE√áO SE N√ÉO FOI ENCONTRADO
        const cepFromAddress = addr.endereco.match(/CEP:\s*(\d{8})/);
        if (cepFromAddress) {
          addr.cep = cepFromAddress[1];
          console.log(`üîç CEP extra√≠do do endere√ßo: ${addr.cep}`);
        } else {
          addr.cep = 'CEP n√£o encontrado';
          console.log(`‚ö†Ô∏è CEP n√£o encontrado para endere√ßo: ${addr.endereco}`);
        }
      }
      
      // ‚úÖ FUN√á√ÉO AUXILIAR: Tentar corrigir CEP incorreto
      function tryToCorrectCep(endereco: string): string | null {
        // ‚úÖ TENTAR EXTRAIR CEP DO ENDERE√áO
        const cepMatch = endereco.match(/CEP:\s*(\d{8})/);
        if (cepMatch) {
          const cep = cepMatch[1];
          // ‚úÖ VERIFICAR SE O CEP EXTRA√çDO √â V√ÅLIDO PARA UBERL√ÇNDIA
          const cepNum = parseInt(cep);
          if (cepNum >= 38400000 && cepNum <= 38499999) {
            return cep;
          }
        }
        return null;
      }

      // ‚úÖ VALIDA√á√ÉO ROBUSTA DE CEP (CORRIGIDA E MELHORADA)
      if (addr.cep !== 'CEP n√£o encontrado' && !addr.cep.includes('ser extra√≠do')) {
        // ‚úÖ LIMPAR CEP (remover espa√ßos, tra√ßos, etc.)
        const cleanCep = addr.cep.replace(/[^\d]/g, '');
        
        // ‚úÖ VERIFICAR SE O CEP TEM 8 D√çGITOS
        if (cleanCep.length === 8) {
          const cepNum = parseInt(cleanCep);
          
          // ‚úÖ VERIFICAR SE O CEP EST√Å NO INTERVALO CORRETO PARA UBERL√ÇNDIA
          if (cepNum >= 38400000 && cepNum <= 38499999) {
            // ‚úÖ ATUALIZAR CEP LIMPO
            if (cleanCep !== addr.cep) {
              addr.cep = cleanCep;
              console.log(`üßπ CEP limpo e validado: ${addr.cep}`);
            } else {
              console.log(`‚úÖ CEP v√°lido para Uberl√¢ndia: ${addr.cep}`);
            }
          } else {
            console.log(`‚ö†Ô∏è CEP fora do intervalo de Uberl√¢ndia: ${addr.cep}`);
            // ‚úÖ TENTAR CORRIGIR CEP INCORRETO
            const correctedCep = tryToCorrectCep(addr.endereco);
            if (correctedCep) {
              addr.cep = correctedCep;
              console.log(`üîß CEP corrigido: ${correctedCep}`);
            }
          }
        } else {
          console.log(`‚ùå CEP malformado: ${addr.cep} (${cleanCep.length} d√≠gitos)`);
          // ‚úÖ TENTAR CORRIGIR CEP MALFORMADO
          const correctedCep = tryToCorrectCep(addr.endereco);
          if (correctedCep) {
            addr.cep = correctedCep;
            console.log(`üîß CEP corrigido: ${correctedCep}`);
          }
        }
      }
      
      // ‚úÖ VERIFICA√á√ÉO FINAL: Evitar CEPs duplicados incorretos
      if (addr.cep !== 'CEP n√£o encontrado' && !addr.cep.includes('ser extra√≠do')) {
        // ‚úÖ VERIFICAR SE O CEP EST√Å DUPLICADO EM OUTROS ENDERE√áOS
        const duplicateCep = addresses.find((otherAddr, otherIndex) => 
          otherIndex !== index && 
          otherAddr.cep === addr.cep && 
          otherAddr.cep !== 'CEP n√£o encontrado' &&
          !otherAddr.cep.includes('ser extra√≠do')
        );
        
        if (duplicateCep) {
          console.log(`‚ö†Ô∏è CEP duplicado detectado: ${addr.cep} em endere√ßos ${index + 1} e ${addresses.indexOf(duplicateCep) + 1}`);
          
          // ‚úÖ TENTAR CORRIGIR CEP DUPLICADO
          const correctedCep = tryToCorrectCep(addr.endereco);
          if (correctedCep && correctedCep !== addr.cep) {
            addr.cep = correctedCep;
            console.log(`üîß CEP duplicado corrigido: ${correctedCep}`);
          }
        }
      }
      
      // ‚úÖ NOVA VALIDA√á√ÉO: Corrigir CEPs baseado nos endere√ßos limpos extra√≠dos
      // ‚ùå REMOVIDO - cleanAddresses n√£o est√° dispon√≠vel nesta fun√ß√£o
      // A valida√ß√£o ser√° feita na fun√ß√£o principal
      
      // ‚úÖ VALIDAR DESTINAT√ÅRIO
      if (addr.destinatario.includes('ser extra√≠do')) {
        addr.destinatario = 'Localiza√ß√£o n√£o especificada';
      }
      
      // ‚úÖ ATUALIZAR ENDERE√áO LIMPO (CORRIGIDO)
      // addr.endereco = cleanAddress; // ‚ùå REMOVIDO - cleanAddress n√£o est√° dispon√≠vel aqui
      
      console.log(`‚úÖ Endere√ßo ${index + 1} processado: ${addr.objeto} - ${addr.endereco} (CEP: ${addr.cep})`);
      return addr;
    });
}

// Configura√ß√£o para aceitar uploads
export const config = {
  api: {
    bodyParser: false,
  },
};
