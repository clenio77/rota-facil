import { NextRequest, NextResponse } from 'next/server';
import { writeFile, unlink, mkdir } from 'fs/promises';
import path from 'path';
import { existsSync } from 'fs';

import { processCarteiroFile, generateMapData, detectFileType } from '../../../../utils/pdfExtractor';

export async function POST(request: NextRequest) {
  try {
    const formData = await request.formData();
    const file = formData.get('file') as File;
    const userLocationStr = formData.get('userLocation') as string;

    if (!file) {
      return NextResponse.json({
        success: false,
        error: 'Nenhum arquivo foi enviado'
      }, { status: 400 });
    }

    // Detectar e validar tipo de arquivo
    const fileType = detectFileType(file.name);
    const supportedTypes = ['pdf', 'excel', 'csv', 'kml', 'gpx', 'xml', 'json'];

    if (!supportedTypes.includes(fileType)) {
      return NextResponse.json({
        success: false,
        error: `Tipo de arquivo n√£o suportado. Formatos aceitos: PDF, XLS, XLSX, CSV, KML, GPX, XML, JSON`
      }, { status: 400 });
    }
    
    // Validar tamanho (m√°ximo 10MB)
    if (file.size > 10 * 1024 * 1024) {
      return NextResponse.json({
        success: false,
        error: 'Arquivo muito grande. M√°ximo 10MB permitido.'
      }, { status: 400 });
    }
    
    let userLocation = null;
    if (userLocationStr) {
      try {
        userLocation = JSON.parse(userLocationStr);
      } catch (error) {
        console.warn('Erro ao parsear userLocation:', error);
      }
    }
    
    // ‚úÖ NOVA ABORDAGEM: Processar arquivo em mem√≥ria
    const bytes = await file.arrayBuffer();
    const buffer = Buffer.from(bytes);

    console.log(`üìÑ Processando ${fileType.toUpperCase()}: ${file.name} (${(file.size / 1024).toFixed(1)}KB)`);

    try {
      // ‚úÖ PROCESSAMENTO DIRETO EM MEM√ìRIA
      let result;
      
      if (fileType === 'pdf') {
        // ‚úÖ PARA PDF: Converter para base64 e processar
        const base64Data = buffer.toString('base64');
        result = await processCarteiroFileFromBuffer(base64Data, file.name, userLocation);
      } else {
        // ‚úÖ PARA OUTROS FORMATOS: Criar arquivo tempor√°rio apenas se necess√°rio
        const tempDir = path.join(process.cwd(), 'temp');
        const fileExtension = file.name.split('.').pop();
        const tempFilePath = path.join(tempDir, `carteiro-${Date.now()}.${fileExtension}`);
        
        try {
          // Criar diret√≥rio temp se n√£o existir
          if (!existsSync(tempDir)) {
            await mkdir(tempDir, { recursive: true });
          }
          
          await writeFile(tempFilePath, buffer);
          
          // Processar arquivo
          result = await processCarteiroFile(tempFilePath, file.name, userLocation);
          
        } finally {
          // Limpar arquivo tempor√°rio
          try {
            if (existsSync(tempFilePath)) {
              await unlink(tempFilePath);
            }
          } catch (cleanupError) {
            console.warn('‚ö†Ô∏è Erro ao remover arquivo tempor√°rio:', cleanupError);
          }
        }
      }
      
      if (!result.success) {
        return NextResponse.json({
          success: false,
          error: result.error || 'Erro ao processar arquivo'
        }, { status: 500 });
      }
      
      // Gerar dados para o mapa
      const mapData = generateMapData(result.addresses);
      
      console.log(`‚úÖ ${fileType.toUpperCase()} processado: ${result.geocoded}/${result.total} endere√ßos geocodificados`);
      
      return NextResponse.json({
        success: true,
        data: {
          ...result,
          mapData,
          fileName: file.name,
          fileSize: file.size,
          processedAt: new Date().toISOString()
        }
      });
      
    } catch (processingError) {
      console.error('‚ùå Erro no processamento:', processingError);
      throw processingError;
    }
    
  } catch (error) {
    console.error('‚ùå Erro no processamento do arquivo:', error);
    console.error('Stack trace:', error instanceof Error ? error.stack : 'Sem stack');

    return NextResponse.json({
      success: false,
      error: 'Erro interno no processamento do arquivo',
      details: error instanceof Error ? error.message : 'Erro desconhecido'
    }, { status: 500 });
  }
}

// ‚úÖ NOVA FUN√á√ÉO: Processar PDF diretamente do buffer
async function processCarteiroFileFromBuffer(base64Data: string, fileName: string, userLocation: any) {
  try {
    console.log('üîç Processando PDF diretamente do buffer...');
    
    // ‚úÖ ABORDAGEM SIMPLES: PROCESSAR PDF COMO IMAGEM INDIVIDUAL
    console.log('üîÑ Processando PDF como imagem individual...');
    
    // ‚úÖ TENTAR PROCESSAMENTO SIMPLES COM OCR.space
    const extractedText = await processPDFSimple(base64Data);
    
    if (!extractedText || extractedText.trim().length === 0) {
      throw new Error('Nenhum texto foi extra√≠do do PDF');
    }
    
    console.log(`‚úÖ PDF processado: ${extractedText.length} caracteres extra√≠dos`);
    console.log('üìù Primeiras 200 caracteres:', extractedText.substring(0, 200) + '...');
    
    // ‚úÖ EXTRAIR ENDERE√áOS DO TEXTO (usando a mesma fun√ß√£o das imagens)
    const addresses = extractAddressesFromText(extractedText);
    console.log(`‚úÖ Endere√ßos extra√≠dos do PDF: ${addresses.length}`);
    
    if (addresses.length === 0) {
      throw new Error('Nenhum endere√ßo foi extra√≠do do PDF');
    }
    
    console.log(`‚úÖ PDF processado com sucesso: ${addresses.length} endere√ßos encontrados`);

    return {
      success: true,
      total: addresses.length,
      geocoded: 0, // Ser√° geocodificado depois
      addresses: addresses,
      fileType: 'pdf',
      metadata: {
        extractedAt: new Date().toISOString(),
        fileName,
        ocrEngine: 'OCR.space',
        textLength: extractedText.length,
        processingMethod: 'simple'
      }
    };

  } catch (error) {
    console.error('‚ùå Erro no processamento do PDF:', error);
    throw error;
  }
}

// ‚úÖ NOVA FUN√á√ÉO: Processar PDF de forma simples
async function processPDFSimple(base64Data: string) {
  const formData = new FormData();
  formData.append('base64Image', `data:application/pdf;base64,${base64Data}`);
  formData.append('language', 'por');
  formData.append('isOverlayRequired', 'false');
  formData.append('detectOrientation', 'true');
  formData.append('scale', 'true');
  formData.append('OCREngine', '2');
  formData.append('filetype', 'pdf');
  formData.append('isTable', 'true');
  
  console.log('üì§ Enviando PDF para OCR.space...');

  const ocrResponse = await fetch('https://api.ocr.space/parse/image', {
    method: 'POST',
    body: formData,
    headers: {
      'apikey': process.env.OCR_SPACE_API_KEY || 'helloworld'
    },
    signal: AbortSignal.timeout(90000) // 90 segundos para PDFs
  });

  if (!ocrResponse.ok) {
    throw new Error(`OCR.space falhou: ${ocrResponse.status}`);
  }

  const ocrData = await ocrResponse.json();
  console.log('üì• Resposta recebida do OCR.space');
  
  // ‚úÖ IMPORTANTE: Mesmo com erro de limite de p√°ginas, o texto pode estar dispon√≠vel
  let extractedText = '';
  if (ocrData.ParsedResults && ocrData.ParsedResults.length > 0) {
    extractedText = ocrData.ParsedResults[0].ParsedText;
  }

  if (!extractedText) {
    throw new Error('Nenhum texto foi extra√≠do do PDF');
  }

      // ‚úÖ SE HOUVER ERRO MAS TEXTO FOI EXTRA√çDO, RETORNAR O TEXTO
    if (ocrData.IsErroredOnProcessing) {
      console.log(`‚ö†Ô∏è OCR.space retornou aviso: ${ocrData.ErrorMessage}`);
      
      // ‚úÖ IMPORTANTE: SEMPRE RETORNAR O TEXTO SE FOI EXTRA√çDO
      console.log(`‚úÖ Texto dispon√≠vel: ${extractedText.length} caracteres`);
      return extractedText; // ‚úÖ RETORNAR O TEXTO DISPON√çVEL
    }

  console.log('‚úÖ PDF processado sem erros');
  return extractedText;
}

// ‚úÖ FUN√á√ÉO AUXILIAR: Extrair endere√ßos do texto
function extractAddressesFromText(text: string) {
  const addresses = [];
  const lines = text.split('\n');
  let sequence = 1;
  let currentAddress = null;

  // ‚úÖ PADR√ïES PARA LISTA ECT
  const patterns = {
    ect: /(\d{3})\s+([A-Z]{2}\s+\d{3}\s+\d{3}\s+\d{3}\s+BR\s+\d+-\d+)/i,
    objeto: /(\d{11,13})/,
    endereco: /(RUA|AVENIDA|AV\.|R\.|TRAVESSA|TRAV\.|ALAMEDA|AL\.)\s+([^,]+),\s*(\d+)/i,
    cep: /(\d{5}-?\d{3})/,
    cidade: /([A-Z√Å√Ä√Ç√É√â√ä√ç√ì√î√ï√ö√á][a-z√°√†√¢√£√©√™√≠√≥√¥√µ√∫√ß\s]+)\s*-\s*([A-Z]{2})/i
  };

  for (const line of lines) {
    const trimmedLine = line.trim();
    if (!trimmedLine || trimmedLine.length < 3) continue;

    // ‚úÖ DETECTAR NOVO ITEM ECT
    const ectMatch = trimmedLine.match(patterns.ect);
    if (ectMatch) {
      if (currentAddress) {
        addresses.push(currentAddress);
      }
      
      currentAddress = {
        id: `ect-${Date.now()}-${sequence}`,
        ordem: sequence.toString(),
        objeto: ectMatch[2].trim(),
        endereco: 'Endere√ßo a ser extra√≠do',
        cep: 'CEP a ser extra√≠do',
        destinatario: 'Localiza√ß√£o a ser extra√≠da',
        coordinates: undefined,
        geocoded: false
      };
      
      sequence++;
      continue;
    }

    // ‚úÖ DETECTAR ENDERE√áO
    if (currentAddress && currentAddress.endereco.includes('ser extra√≠do')) {
      if (trimmedLine.includes('RUA') || trimmedLine.includes('AVENIDA') || trimmedLine.includes('AV.')) {
        currentAddress.endereco = trimmedLine;
      }
    }

    // ‚úÖ DETECTAR CEP
    if (currentAddress && currentAddress.cep.includes('ser extra√≠do')) {
      const cepMatch = trimmedLine.match(patterns.cep);
      if (cepMatch) {
        currentAddress.cep = cepMatch[1];
      }
    }

    // ‚úÖ DETECTAR CIDADE/ESTADO
    if (currentAddress && currentAddress.destinatario.includes('ser extra√≠do')) {
      const cityMatch = trimmedLine.match(patterns.cidade);
      if (cityMatch) {
        currentAddress.destinatario = `${cityMatch[1].trim()}, ${cityMatch[2].trim()}`;
      }
    }
  }

  // ‚úÖ ADICIONAR √öLTIMO ENDERE√áO
  if (currentAddress) {
    addresses.push(currentAddress);
  }

  // ‚úÖ VALIDAR ENDERE√áOS
  return addresses.map((addr, index) => {
    if (addr.endereco.includes('ser extra√≠do')) {
      addr.endereco = `Endere√ßo ${index + 1} (requer edi√ß√£o)`;
    }
    if (addr.cep.includes('ser extra√≠do')) {
      addr.cep = 'CEP n√£o encontrado';
    }
    if (addr.destinatario.includes('ser extra√≠do')) {
      addr.destinatario = 'Localiza√ß√£o n√£o especificada';
    }
    return addr;
  });
}

// Configura√ß√£o para aceitar uploads
export const config = {
  api: {
    bodyParser: false,
  },
};
